<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FreeSql.Extensions.BaseEntity</name>
    </assembly>
    <members>
        <member name="T:BaseEntity">
            <summary>
            包括 CreateTime/UpdateTime/IsDeleted 的实体基类
            </summary>
        </member>
        <member name="P:BaseEntity.Orm">
            <summary>
            全局 IFreeSql orm 对象
            </summary>
        </member>
        <member name="M:BaseEntity.Initialization(IFreeSql)">
            <summary>
            初始化BaseEntity
            BaseEntity.Initialization(new FreeSqlBuilder()
            <para></para>
            .UseAutoSyncStructure(true)
            <para></para>
            .UseConnectionString(DataType.Sqlite, "data source=test.db;max pool size=5")
            <para></para>
            .Build());
            </summary>
            <param name="fsql">IFreeSql orm 对象</param>
        </member>
        <member name="P:BaseEntity.CreateTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:BaseEntity.UpdateTime">
            <summary>
            更新时间
            </summary>
        </member>
        <member name="P:BaseEntity.IsDeleted">
            <summary>
            逻辑删除
            </summary>
        </member>
        <member name="M:BaseEntity.Begin">
            <summary>
            开启工作单元事务
            </summary>
            <returns></returns>
        </member>
        <member name="M:BaseEntity.Begin(System.Nullable{System.Data.IsolationLevel})">
            <summary>
            开启工作单元事务
            </summary>
            <param name="level">事务等级</param>
            <returns></returns>
        </member>
        <member name="T:BaseEntityAsync`1">
            <summary>
            包括 CreateTime/UpdateTime/IsDeleted、以及 CRUD 异步方法的实体基类
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="P:BaseEntityAsync`1.Select">
            <summary>
            查询数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:BaseEntityAsync`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            查询条件，Where(a => a.Id > 10)，支持导航对象查询，Where(a => a.Author.Email == "2881099@qq.com")
            </summary>
            <param name="exp">lambda表达式</param>
            <returns></returns>
        </member>
        <member name="M:BaseEntityAsync`1.WhereIf(System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            查询条件，Where(true, a => a.Id > 10)，支导航对象查询，Where(true, a => a.Author.Email == "2881099@qq.com")
            </summary>
            <param name="condition">true 时生效</param>
            <param name="exp">lambda表达式</param>
            <returns></returns>
        </member>
        <member name="P:BaseEntityAsync`1.Repository">
            <summary>
            仓储对象
            </summary>
        </member>
        <member name="M:BaseEntityAsync`1.Attach">
            <summary>
            附加实体，在更新数据时，只更新变化的部分
            </summary>
        </member>
        <member name="M:BaseEntityAsync`1.UpdateIsDeletedAsync(System.Boolean)">
             async *
        </member>
        <member name="M:BaseEntityAsync`1.DeleteAsync">
            <summary>
            删除数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:BaseEntityAsync`1.RestoreAsync">
            <summary>
            恢复删除的数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:BaseEntityAsync`1.UpdateAsync">
            <summary>
            更新数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:BaseEntityAsync`1.InsertAsync">
            <summary>
            插入数据
            </summary>
        </member>
        <member name="M:BaseEntityAsync`1.SaveAsync">
            <summary>
            更新或插入
            </summary>
            <returns></returns>
        </member>
        <member name="T:BaseEntityAsync`2">
            <summary>
            包括 CreateTime/UpdateTime/IsDeleted、CRUD 异步方法、以及 ID 主键定义 的实体基类
            <para></para>
            当 TKey 为 int/long 时，Id 主键被设为自增值主键
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="P:BaseEntityAsync`2.Id">
            <summary>
            主键
            </summary>
        </member>
        <member name="M:BaseEntityAsync`2.FindAsync(`1)">
            <summary>
            根据主键值获取数据
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:BaseEntity`1">
            <summary>
            包括 CreateTime/UpdateTime/IsDeleted、以及 CRUD 异步和同步方法的实体基类
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:BaseEntity`1.Delete">
            <summary>
            删除数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:BaseEntity`1.Restore">
            <summary>
            恢复删除的数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:BaseEntity`1.Update">
            <summary>
            更新数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:BaseEntity`1.Insert">
            <summary>
            插入数据
            </summary>
        </member>
        <member name="M:BaseEntity`1.Save">
            <summary>
            更新或插入
            </summary>
            <returns></returns>
        </member>
        <member name="T:BaseEntity`2">
            <summary>
            包括 CreateTime/UpdateTime/IsDeleted、CRUD 方法、以及 ID 主键定义 的实体基类
            <para></para>
            当 TKey 为 int/long 时，Id 主键被设为自增值主键
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="P:BaseEntity`2.Id">
            <summary>
            主键
            </summary>
        </member>
        <member name="M:BaseEntity`2.FindAsync(`1)">
            <summary>
            根据主键值获取数据
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:BaseEntity`2.Find(`1)">
            <summary>
            根据主键值获取数据
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
    </members>
</doc>
